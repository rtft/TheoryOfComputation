

#+TITLE: Automata
#+STARTUP: latexpreview
* Ch 1
** Regular patterns
*** Finite and Fixed size.
* Ch 2
** Symbols

definition: require symbols to be strings of length 1.

Includes things such as English chaaracters, words, musical symbols flashes of light etc


** Alphabet
Finite and non empty set of symbols

$\sigma$ to denote an alphabet

for example:

$\sigma = {0,1}$

$\sigma = {a}$ ; Is an example of a singleton alphabet

(an alphabet is like a keyboard where each symbol is 1 key)

** Strings or words

*** String or word is a finetely long and possibly empty sequence of symbols

Strings read left to right

*** Empty string denoted as epsilon

*** A string is said to be over an alphabet.
so for an example "AteAnApple" consists of 8 distinct symbols {a,t,e,A,n,p,l}

*** Concatenate:
combining 2 strings to obtain a new string.


#+begin_src python :session

"abc" + "defg"

#+end_src

#+RESULTS:
: abcdefg

** Zero or One
*** Multiplication of x by zero yields zero for any x
*** Multiplication of x by one yields x

idk why I even wrote that
*** Nat, Int, Real
**** One string for concatenation.

If String concatenation is viewed as multiplication then episolon must be 1 element because:

$\epsilon ab = ab\epsilon = abcdefg$

#+begin_src python :session

"" + "ab"

#+end_src

#+RESULTS:
: ab
****  Zero for concatenation:

There is no Zero for string concatenation, so no zero string that when any string is concatenated with gives a zero


Basically this section kind of means that you can do stuff with strings by an empty string but not with a zero string which I am guessing is null or something
**** Exponentiation.
Essentiaally repeated multiplication. so multiples of the first what was done earlier.

as an example.
***** For symbols such as a, we have a^2 = aa, a^3 = aaa, etc
***** For a string ab, we have (ab)^2 = abab, and (ab)^3 = ababab
***** for (abacaea)^2 = abacaeaabacaea

#+begin_src python :session

"a" * 2
"a" * 3
"ab" * 2
"ab" * 3
"abacaea" * 2
#+end_src

#+RESULTS:
: abacaeaabacaea

| character | multiplier | result         |
|-----------+------------+----------------|
| "a"       |          2 | "aa"           |
| "a"       |          3 | "aaa"          |
| "ab"      |          2 | "abab"         |
| "ab"      |          3 | "ababab"       |
| "abacaea" |          2 | abacaeaabacaea |
|           |            |                |


***** Exponentiation by zero

Any real number x, x^0 = 1;

Basically anything exponentiated to zero becomes epsilon

ex: a^3 = aa^2 = aaa^1 = aaaa^0 = aaa\epsilon = aaaa

****** Exercise: how many values are there in s , where s = abacaca

#+begin_src python :session

stringVal = "abacaca" * 4

acount = stringVal.count("a")
bcount = stringVal.count("b")
ccount = stringVal.count("c")

print(acount)
print(bcount)
print(ccount)

#+end_src

#+RESULTS:
: None
** Language:

A language is a possibly empty and possibly infinite set of strings ( each string is finite )


*** Examples:
EmptyLang = emptyset

*** Set builder notation.
specifiying all strings of what the book calls mindless repititions of 01

$L_{01}Rep = {(01)^i : \geq 0}$

which results to $L_{01} Rep = {epsilon, 01, 0101,010101, 01010101....}$

and so forth

*** Language Concatenation:
#+begin_src python :session
def cat(L1,L2):
    return set({x+y for x in L1 for y in L2})
#+end_src

#+RESULTS:
: None

**** Zero of language for language concatenation:

Empty set is the zero of language concatenation

**** One of a language for Language concatenation:

set of epsilon is the One of language concatenation. because it gives back the set



*** Language Exponentiation:

$L^0 = {\epsilon}$

Recursive  Case

$L^n = LL^{n-1}$

*** Important observation:

$L^0$ is the unit of language (epsilon)

**** True of any language L

**** Zero language emptyset is generated by python funciton phi()

**** so we have $emptyset^0 = {epsilon}$
