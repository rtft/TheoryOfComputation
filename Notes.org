

#+TITLE: Models of Computation Notes
#+STARTUP: latexpreview
* Intro
** Prereqs
*** Symbol - a,b,c,...   0,1,2,3,...
*** Alphabet - Collection of symbols

Denoted by $\Sigma$


Eg. {a,b}, {d,e,f,g},{0,1,2}..
*** String - sequence of symbols

Eg. a,b,0,1,aa,bb,ab,01..
*** Language  - Set of Strings

Eg. $\Sigma = \{0,1\}$


$L_1 =  \text{set of all strings of length 2}
= \{00,01,10,11\}$

$L_2 = \text{set of all strings of length 3} = \{000,001,010,011, 100,1010,110,111\}$

$L_3 = \text{set of all strings that begin with 0} = \{0,00,01,00,001,010,011,000,...\}$

where $L_1 \text{ and } L_2$ are finite and $L_3$ is infinite
*** Powers of Sigma:

$\Sigma = \{0,1\}$

$\Sigma^0 = \text{Set of all strings of length 0}$ : $\Sigma^0 = \{\epsilon\}$

$\Sigma^1 = \text{Set of all strings of length 1}$ : $\Sigma^1 = \{0,1\}$

$\Sigma^2 = \text{Set of all strings of length 2}$ : $\Sigma^2 = \{00,01,10,11\}$

$\Sigma^3 = \text{Set of all strings of length 3}$ : $\Sigma^3 = \{000,001,010,011,100,101,110,111\}$

$\Sigma^n = \text{Set of all strings of length n}$

$\Sigma^* = \Sigma^0 \cup \Sigma^1 \cup \Sigma^2 \cup \Sigma^3 \dots$

$= \{\epsilon\} \cup \{0,1\} \cup \{00,01,10,11\} \cup \dots}$

= Set of all possible strings of all of lengths over the alphabet {0,1}

so it is infinite

**** Cardinality - Numbers of elements in a set

$\Sigma^n = 2^n$

** Finite State Machine
2 Categories

*** Finite Automata with output
**** Moore Machine
**** Mealy Machine

*** Finite Automata without output
**** DFA
**** NFA
**** $\epsilon$ - NFA
** DFA
- Simplest model of computation
- It has very limited memory


- Arrow coming from nowhere means that it is the initial state
- Circle with another circle means final state

[[./IMG_Resources/FiniteState1.png][Image for below]]

$(Q,\Sigma, q_0, F,\delta)$

Q = Set of all states

$\Sigma$ = inputs

$q_0$ = Start state/ initial state

F = Set of final states.

$\delta$ = Transition function that maps from $Q \times \Sigma \xrightarrow{} Q$

|   | 0 | 1 |
|---+---+---|
| A | C | B |
| B | D | A |
| C | A | D |
| D | B | C |

** Regular Languages

A language is said to be a regular alnguage if and only if some finite state machine recognizes it.

*** Languages that are not regular

**** Not recognized by any FSM

**** Require memory

***** Memory of FSM is very limited

***** Cannot store or count strings

*** Operations on regular languages

**** Union - $A \cup B = \{x | x \in A \text{ or } x \in B\}$

**** Concatentation -

**** Star -

** NFA

*** Deterministic Finite Automata

**** Determinism


*** Non-deterministic Finite Automata
